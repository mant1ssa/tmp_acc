"use strict";

const fetch = require("node-fetch");

class MegafonSms {

    endpoint;
    authBasic;
    sender;

    constructor({ endpoint, login, password, sender, callback }) {
        this.endpoint = new URL(endpoint);
        this.authBasic = Buffer.from([login, password].join(':')).toString('base64');
        this.sender = sender;
        this.callback = new URL(callback);

    };

    async #request(method, path, requestBody) {
        const requestOptions = {
            method: method,
            headers: new fetch.Headers(),
            body: JSON.stringify(requestBody)
        };
        requestOptions.headers.append('Authorization', 'Basic ' + this.authBasic);
        requestOptions.headers.append('Content-type', 'application/json');
        requestOptions.headers.append('Accept', 'application/json');

        /** @type {fetch.Response} */
        const response = await fetch(this.endpoint + path, requestOptions);
        if (!response.ok) {
            throw new MegafonSmsError(response.statusText, await response.text());
        }
        const responseBody = await response.json();

        if (responseBody.result.status.code != 0) {
            throw new MegafonSmsError(responseBody.result.status.description, responseBody.result.status);
        }

        return response;
    }

    sms({ to, message }) {
        return this.#request('POST', '/sms', {
            from: this.sender,
            to,
            message,
            callback_url: this.callback
        });
    }
}

class MegafonSmsError extends Error {
    constructor(message, payload) {
        super('MegafonSms: ' + message);
        this.payload = payload;
    }
}

module.exports = {
    MegafonSms,
    MegafonSmsError
}